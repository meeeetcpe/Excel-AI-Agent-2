var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const devSettings = require("office-addin-dev-settings");
const manifest = require("office-addin-manifest");
const process_1 = require("./process");
function stopDebugging(manifestPath, unregisterCommandLine) {
    return __awaiter(this, void 0, void 0, function* () {
        console.log("Debugging is being stopped...");
        const isWindowsPlatform = (process.platform === "win32");
        const manifestInfo = yield manifest.readManifestFile(manifestPath);
        if (!manifestInfo.id) {
            throw new Error("Manifest does not contain the id for the Office Add-in.");
        }
        // clear dev settings
        if (isWindowsPlatform) {
            yield devSettings.clearDevSettings(manifestInfo.id);
        }
        if (unregisterCommandLine) {
            // unregister
            try {
                yield process_1.startProcess(unregisterCommandLine);
            }
            catch (err) {
                console.log(`Unable to unregister the Office Add-in. ${err}`);
            }
        }
        console.log("Debugging has been stopped.");
    });
}
exports.stopDebugging = stopDebugging;
//# sourceMappingURL=stop.js.map